#!/bin/bash

targetFile="$(cat /tmp/xmluxvTargetFile)"

echo $PWD > /tmp/xmluxv-posnow

posnow=$(cat /tmp/xmluxv-posnow)

## Tutti gli id che iniziano con <a>, ossia il gradusII a.
# è troppo vincolante utilizzare la chiave <a>.
#grep -o "ID=\"a*.*" $targetFile.lmx > /tmp/xmluxv-css01
# In questo modo puoi scrivere ID anche nel preambolo, perché quest'ultimo escluso.

cat $targetFile.lmx | sed -n '/<!-- begin radix/,$p' > /tmp/xmluxv-css0000

## mi serve la coerenza di numero di righe tra il file lmx in cui effettuerò le iniezioni
## e il file selezionato in cui ho escluso il preambolo.
grep -n "<!-- begin radix" $targetFile.lmx | cut -d: -f1 > /tmp/xmluxv-nLineaBeginRadix

leggoNBeginRadix=$(cat /tmp/xmluxv-nLineaBeginRadix)

righeEsatte=$(($leggoNBeginRadix - 1))

touch /tmp/xmluxv-IpezzoCoerenzaBeginRadixLmx

declare -i var=0

while ((k++ <$righeEsatte))
  do
  var=$var+1
  echo "riga per coerenza con il file lmx n. $var" >> /tmp/xmluxv-IpezzoCoerenzaBeginRadixLmx
done 

cat /tmp/xmluxv-IpezzoCoerenzaBeginRadixLmx /tmp/xmluxv-css0000 > /tmp/xmluxv-css000

## Il I ID è sempre quello del root, io non specifico nulla nel preambolo xml. 
grep "ID=*" /tmp/xmluxv-css000 | head -n 1 > /tmp/xmluxv-css00

## leggo il valore di root
cat /tmp/xmluxv-css00 | cut -d= -f2,2 | sed 's/"//g' | sed 's/>/ /' | awk '$1 > 0 {print $1}' > /tmp/xmluxv-idRoot

leggoIdRoot="$(cat /tmp/xmluxv-idRoot)"

## ora posso selezionare tutti gli ID appartenenti al root
grep "ID=\"$leggoIdRoot" /tmp/xmluxv-css000 | awk '$1 > 0 {print $2}' > /tmp/xmluxv-css01

cat /tmp/xmluxv-css01 | sort > /tmp/xmluxv-css02

cat /tmp/xmluxv-css02 | uniq > /tmp/xmluxv-css03

## tutti i capitoli e sottostanti elementi
grep "\." /tmp/xmluxv-css03 > /tmp/xmluxv-css04

cat /tmp/xmluxv-css04 | sort > /tmp/xmluxv-css05

## solo i capitoli, ossia gli a* senza .
comm -3 /tmp/xmluxv-css03 /tmp/xmluxv-css05 > /tmp/xmluxv-css06

## Nei valori degli elementi non possono esserci caratteri speciali, quali e.g. *, #, &.
# perché grep non leggerebbe la stringa e quindi non producendo file *.dtd, *.css perfetti.

################ INIZIO ROOT 

rm -fr  /tmp/xmluxv-cssRoot

mkdir /tmp/xmluxv-cssRoot

split -l1 /tmp/xmluxv-css01 /tmp/xmluxv-cssRoot/


for c in $(ls /tmp/xmluxv-cssRoot)
do
	leggoC="$(cat /tmp/xmluxv-cssRoot/$c)"

        grep "$leggoC" /tmp/xmluxv-css000 | awk '$1 > 0 {print $1}' | sed 's/<//g' > /tmp/xmluxv-element

	leggoElement="$(cat /tmp/xmluxv-element)"

	cat /tmp/xmluxv-cssRoot/$c | sed 's/>/ /g' > /tmp/xmluxv-id0

	cat /tmp/xmluxv-id0 | awk '$1 > 0 {print $1}' | cut -d= -f2,2 | sed 's/"//g' > /tmp/xmluxv-id

	leggoID="$(cat /tmp/xmluxv-id)"

	grep "ID=\"$leggoID\"" $targetFile.lmx | sed 's/.*>//g' > /tmp/xmluxv-title

	leggoTitle="$(cat /tmp/xmluxv-title)"

	## Vale solo se ho come ultimo attributo name="", e.g.
	# <gradusI ID="a01" name="I grado Iblocco">GradusI a01

#	grep "ID=\"$leggoID\"" $targetFile.lmx > /tmp/xmluxv-id-line
#
#	cat /tmp/xmluxv-id-line | sed 's/.*name=//g' | sed 's/>.*//g' > /tmp/xmluxv-name
	
	grep "ID=\"$leggoID\"" $targetFile.lmx | sed 's/.*name=//g' | sed 's/>.*//g' > /tmp/xmluxv-name

	leggoName=$(cat /tmp/xmluxv-name)

	leggoIdRoot="$(cat /tmp/xmluxv-idRoot)"

	if test $leggoIdRoot == $leggoID

	then
	
	  echo "$leggoID" >> /tmp/xmluxv-allIDs

	  echo "$leggoName" >> /tmp/xmluxv-allNames

	  echo "$leggoElement" >> /tmp/xmluxv-allElements

	  echo "$leggoTitle" >> /tmp/xmluxv-allTitles

          echo "$leggoElement $leggoIdRoot" >> /tmp/xmluxv-elementsEtIDs

	  echo "$leggoElement $leggoID $leggoTitle" >> /tmp/xmluxv-elementsEtIDsEtTitles

	  echo "$leggoID $leggoName" >> /tmp/xmluxv-IDsEtNames

	  echo "$leggoElement $leggoID $leggoName" >> /tmp/xmluxv-elementsEtIDsEtNames

	  echo "$leggoElement $leggoID $leggoName $leggoTitle" >> /tmp/xmluxv-elementsEtIDsEtNamesEtTitles

	  echo "$leggoID $leggoName $leggoTitle" >> /tmp/xmluxv-IDsEtNamesEtTitles

	  echo "$leggoID $leggoTitle" >> /tmp/xmluxv-IDsEtTitles

	  echo "$leggoElement $leggoTitle" >> /tmp/xmluxv-elementsEtTitles

	  echo "$leggoElement" > /tmp/xmluxv-elementRoot

rm -f /tmp/xmluxv-cssRoot/$c

	fi


done
################ FINE ROOT 

############# INIZIO SINOSSI 

for c in $(ls /tmp/xmluxv-cssRoot)

do

	leggoC="$(cat /tmp/xmluxv-cssRoot/$c)"

        grep "$leggoC" /tmp/xmluxv-css000 | awk '$1 > 0 {print $1}' | sed 's/<//g' > /tmp/xmluxv-element

	leggoElement="$(cat /tmp/xmluxv-element)"

	cat /tmp/xmluxv-cssRoot/$c | sed 's/>/ /g' > /tmp/xmluxv-id0

	cat /tmp/xmluxv-id0 | awk '$1 > 0 {print $1}' | cut -d= -f2,2 | sed 's/"//g' > /tmp/xmluxv-id

	leggoID="$(cat /tmp/xmluxv-id)"

	grep "ID=\"$leggoID\"" $targetFile.lmx | sed 's/.*>//g' > /tmp/xmluxv-title
	
	grep "ID=\"$leggoID\"" $targetFile.lmx | sed 's/.*name=//g' | sed 's/>.*//g' > /tmp/xmluxv-name

	leggoName=$(cat /tmp/xmluxv-name)

	leggoTitle="$(cat /tmp/xmluxv-title)"

	leggoIdRoot="$(cat /tmp/xmluxv-idRoot)"

	echo "$leggoIdRoot 00" | sed 's/ //g' > /tmp/xmluxv-sinossi

	idSinossi="$(cat /tmp/xmluxv-sinossi)"

	## sinossi: un solo numero (un solo zero)
	if test "$leggoID" == "$idSinossi"

	then

echo "$leggoID" >> /tmp/xmluxv-allIDs

echo "$leggoName" >> /tmp/xmluxv-allNames

echo "$leggoElement" >> /tmp/xmluxv-allElements

echo "$leggoTitle" >> /tmp/xmluxv-allTitles

echo "$leggoElement $leggoID" >> /tmp/xmluxv-elementsEtIDs

echo "$leggoID $leggoName" >> /tmp/xmluxv-IDsEtNames

echo "$leggoElement $leggoID $leggoName" >> /tmp/xmluxv-elementsEtIDsEtNames

echo "$leggoElement $leggoID $leggoName $leggoTitle" >> /tmp/xmluxv-elementsEtIDsEtNamesEtTitle

echo "$leggoID $leggoName $leggoTitle" >> /tmp/xmluxv-IDsEtNamesEtTitle

echo "$leggoElement $leggoID $leggoTitle" >> /tmp/xmluxv-elementsEtIDsEtTitles

echo "$leggoID $leggoTitle" >> /tmp/xmluxv-IDsEtTitles

echo "$leggoElement $leggoTitle" >> /tmp/xmluxv-elementsEtTitles

	cp /tmp/xmluxv-element /tmp/xmluxv-elementSinossi

	rm -f /tmp/xmluxv-cssRoot/$c
        
	fi

done

############# FINE SINOSSI 

################ INIZIO  PART

mkdir /tmp/xmluxv-gradusI

for c in $(ls /tmp/xmluxv-cssRoot)

do
	leggoC="$(cat /tmp/xmluxv-cssRoot/$c)"

        grep "$leggoC" /tmp/xmluxv-css000 | awk '$1 > 0 {print $1}' | sed 's/<//g' > /tmp/xmluxv-element

	leggoElement="$(cat /tmp/xmluxv-element)"

	cat /tmp/xmluxv-cssRoot/$c | sed 's/>/ /g' > /tmp/xmluxv-id0

	cat /tmp/xmluxv-id0 | awk '$1 > 0 {print $1}' | cut -d= -f2,2 | sed 's/"//g' > /tmp/xmluxv-id

	leggoID="$(cat /tmp/xmluxv-id)"

	grep "ID=\"$leggoID\"" $targetFile.lmx | sed 's/.*>//g' > /tmp/xmluxv-title

	leggoTitle="$(cat /tmp/xmluxv-title)"

	
	grep "ID=\"$leggoID\"" $targetFile.lmx | sed 's/.*name=//g' | sed 's/>.*//g' > /tmp/xmluxv-name

	leggoName=$(cat /tmp/xmluxv-name)

	sed 's/[^.]//g' /tmp/xmluxv-id | awk '{ print length }' > /tmp/xmluxv-dotFrequency

	leggoDotFrequency=$(cat /tmp/xmluxv-dotFrequency)


	#### Part, non ha mai punti nell'ID.

	if test $leggoDotFrequency -eq 0

	then

		cp /tmp/xmluxv-cssRoot/$c /tmp/xmluxv-gradusI

		cp /tmp/xmluxv-element /tmp/xmluxv-elementPart

echo "$leggoID" >> /tmp/xmluxv-allIDs

echo "$leggoName" >> /tmp/xmluxv-allNames

echo "$leggoElement" >> /tmp/xmluxv-allElements

echo "$leggoTitle" >> /tmp/xmluxv-allTitles

echo "$leggoElement $leggoID" >> /tmp/xmluxv-elementsEtIDs

echo "$leggoID $leggoName" >> /tmp/xmluxv-IDsEtNames

echo "$leggoElement $leggoID $leggoName" >> /tmp/xmluxv-elementsEtIDsEtNames

echo "$leggoElement $leggoID $leggoName $leggoTitle" >> /tmp/xmluxv-elementsEtIDsEtNamesEtTitles

echo "$leggoID $leggoName $leggoTitle" >> /tmp/xmluxv-IDsEtNamesEtTitles

echo "$leggoElement $leggoID $leggoTitle" >> /tmp/xmluxv-elementsEtIDsEtTitles

echo "$leggoID $leggoTitle" >> /tmp/xmluxv-IDsEtTitles

echo "$leggoElement $leggoTitle" >> /tmp/xmluxv-elementsEtTitles

rm -f /tmp/xmluxv-cssRoot/$c

	fi


done
################ FINE PART 

############## INIZIO CHAPTERS
mkdir /tmp/xmluxv-gradusII

for c in $(ls /tmp/xmluxv-cssRoot)

do

	leggoC="$(cat /tmp/xmluxv-cssRoot/$c)"

        grep "$leggoC" /tmp/xmluxv-css000 | awk '$1 > 0 {print $1}' | sed 's/<//g' > /tmp/xmluxv-element

	leggoElement="$(cat /tmp/xmluxv-element)"

	cat /tmp/xmluxv-cssRoot/$c | sed 's/>/ /g' > /tmp/xmluxv-id0

	cat /tmp/xmluxv-id0 | awk '$1 > 0 {print $1}' | cut -d= -f2,2 | sed 's/"//g' > /tmp/xmluxv-id
	
	leggoID="$(cat /tmp/xmluxv-id)"

	grep "ID=\"$leggoID\"" $targetFile.lmx | sed 's/.*>//g' > /tmp/xmluxv-title

	leggoTitle="$(cat /tmp/xmluxv-title)"

	grep "ID=\"$leggoID\"" $targetFile.lmx | sed 's/.*name=//g' | sed 's/>.*//g' > /tmp/xmluxv-name

	leggoName=$(cat /tmp/xmluxv-name)

	sed 's/[^.]//g' /tmp/xmluxv-id | awk '{ print length }' > /tmp/xmluxv-dotFrequency

	leggoDotFrequency=$(cat /tmp/xmluxv-dotFrequency)

	#### GradusII: il gradusII, insieme a part, non ha mai punti nell'ID; ma gradusI lo risolvo diversamente.

	if test $leggoDotFrequency -eq 1

	then

echo "$leggoID" >> /tmp/xmluxv-allIDs

echo "$leggoName" >> /tmp/xmluxv-allNames

echo "$leggoElement" >> /tmp/xmluxv-allElements

echo "$leggoTitle" >> /tmp/xmluxv-allTitles

echo "$leggoElement $leggoID" >> /tmp/xmluxv-elementsEtIDs

echo "$leggoID $leggoName" >> /tmp/xmluxv-IDsEtNames

echo "$leggoElement $leggoID $leggoName" >> /tmp/xmluxv-elementsEtIDsEtNames

echo "$leggoElement $leggoID $leggoName $leggoTitle" >> /tmp/xmluxv-elementsEtIDsEtNamesEtTitles

echo "$leggoID $leggoName $leggoTitle" >> /tmp/xmluxv-IDsEtNamesEtTitles

echo "$leggoElement $leggoID $leggoTitle" >> /tmp/xmluxv-elementsEtIDsEtTitles

echo "$leggoID $leggoTitle" >> /tmp/xmluxv-IDsEtTitles

echo "$leggoElement $leggoTitle" >> /tmp/xmluxv-elementsEtTitles

cp /tmp/xmluxv-cssRoot/$c /tmp/xmluxv-gradusII

cp /tmp/xmluxv-element /tmp/xmluxv-elementChapter

rm -f /tmp/xmluxv-cssRoot/$c

	fi
	
done
################ FINE CHAPTERS 

################ INIZIO SECTION

mkdir /tmp/xmluxv-gradusIII

leggoIdRoot="$(cat /tmp/xmluxv-idRoot)"

grep "ID=\"$leggoIdRoot" /tmp/xmluxv-css05 > /tmp/xmluxv-sectionAnd


rm -fr /tmp/xmluxv-css05Split

mkdir /tmp/xmluxv-css05Split

split -l1 /tmp/xmluxv-sectionAnd  /tmp/xmluxv-css05Split/

for d in $(ls /tmp/xmluxv-css05Split)

do

rm -f /tmp/xmluxv-pcdata

touch /tmp/xmluxv-pcdata

	leggoD="$(cat /tmp/xmluxv-css05Split/$d)"

        grep "$leggoD" /tmp/xmluxv-css000 | awk '$1 > 0 {print $1}' | sed 's/<//g' > /tmp/xmluxv-element

	leggoElement="$(cat /tmp/xmluxv-element)"

	grep "ID=\"$leggoID\"" $targetFile.lmx | sed 's/.*name=//g' | sed 's/>.*//g' > /tmp/xmluxv-name

	leggoName=$(cat /tmp/xmluxv-name)

	cat /tmp/xmluxv-css05Split/$d | sed 's/>/ /g' > /tmp/xmluxv-id0

	cat /tmp/xmluxv-id0 | awk '$1 > 0 {print $1}' | cut -d= -f2,2 | sed 's/"//g' > /tmp/xmluxv-id
	
	leggoID="$(cat /tmp/xmluxv-id)"

	grep "ID=\"$leggoID\"" $targetFile.lmx | sed 's/.*>//g' > /tmp/xmluxv-title

	leggoTitle="$(cat /tmp/xmluxv-title)"

	sed 's/[^.]//g' /tmp/xmluxv-id | awk '{ print length }' > /tmp/xmluxv-dotFrequency

	leggoDotFrequency=$(cat /tmp/xmluxv-dotFrequency)

	if test $leggoDotFrequency -eq 2

	then

echo "$leggoID" >> /tmp/xmluxv-allIDs

echo "$leggoName" >> /tmp/xmluxv-allNames

echo "$leggoElement" >> /tmp/xmluxv-allElements

echo "$leggoTitle" >> /tmp/xmluxv-allTitles

echo "$leggoElement $leggoID" >> /tmp/xmluxv-elementsEtIDs

echo "$leggoID $leggoName" >> /tmp/xmluxv-IDsEtNames

echo "$leggoElement $leggoID $leggoName" >> /tmp/xmluxv-elementsEtIDsEtNames

echo "$leggoElement $leggoID $leggoName $leggoTitle" >> /tmp/xmluxv-elementsEtIDsEtNamesEtTitles

echo "$leggoID $leggoName $leggoTitle" >> /tmp/xmluxv-IDsEtNamesEtTitles

echo "$leggoElement $leggoID $leggoTitle" >> /tmp/xmluxv-elementsEtIDsEtTitles

echo "$leggoID $leggoTitle" >> /tmp/xmluxv-IDsEtTitles

echo "$leggoElement $leggoTitle" >> /tmp/xmluxv-elementsEtTitles

cp /tmp/xmluxv-css05Split/$d /tmp/xmluxv-gradusIII

cp /tmp/xmluxv-element /tmp/xmluxv-elementSection

rm -f /tmp/xmluxv-css05Split/$d

fi

done

################ FINE SECTION

################ INIZIO SUBSECTION

mkdir /tmp/xmluxv-gradusIV

rm -f /tmp/xmluxv-ElementDtd

touch /tmp/xmluxv-ElementDtd

for d in $(ls /tmp/xmluxv-css05Split)

do

rm -f /tmp/xmluxv-pcdata

touch /tmp/xmluxv-pcdata


	leggoD="$(cat /tmp/xmluxv-css05Split/$d)"

        grep "$leggoD" /tmp/xmluxv-css000 | awk '$1 > 0 {print $1}' | sed 's/<//g' > /tmp/xmluxv-element

	leggoElement="$(cat /tmp/xmluxv-element)"

	cat /tmp/xmluxv-css05Split/$d | sed 's/>/ /g' > /tmp/xmluxv-id0

	cat /tmp/xmluxv-id0 | awk '$1 > 0 {print $1}' | cut -d= -f2,2 | sed 's/"//g' > /tmp/xmluxv-id
	
	leggoID="$(cat /tmp/xmluxv-id)"

	grep "ID=\"$leggoID\"" $targetFile.lmx | sed 's/.*>//g' > /tmp/xmluxv-title

	leggoTitle="$(cat /tmp/xmluxv-title)"

	grep "ID=\"$leggoID\"" $targetFile.lmx | sed 's/.*name=//g' | sed 's/>.*//g' > /tmp/xmluxv-name

	leggoName=$(cat /tmp/xmluxv-name)

	sed 's/[^.]//g' /tmp/xmluxv-id | awk '{ print length }' > /tmp/xmluxv-dotFrequency

	leggoDotFrequency=$(cat /tmp/xmluxv-dotFrequency)

	if test $leggoDotFrequency -eq 3

	then

echo "$leggoID" >> /tmp/xmluxv-allIDs

echo "$leggoElement" >> /tmp/xmluxv-allElements

echo "$leggoName" >> /tmp/xmluxv-allNames

echo "$leggoTitle" >> /tmp/xmluxv-allTitles

echo "$leggoElement $leggoID" >> /tmp/xmluxv-elementsEtIDs

echo "$leggoID $leggoName" >> /tmp/xmluxv-IDsEtNames

echo "$leggoElement $leggoID $leggoName" >> /tmp/xmluxv-elementsEtIDsEtNames

echo "$leggoElement $leggoID $leggoName $leggoTitle" >> /tmp/xmluxv-elementsEtIDsEtNamesEtTitles

echo "$leggoID $leggoName $leggoTitle" >> /tmp/xmluxv-IDsEtNamesEtTitles

echo "$leggoElement $leggoID $leggoTitle" >> /tmp/xmluxv-elementsEtIDsEtTitles

echo "$leggoID $leggoTitle" >> /tmp/xmluxv-IDsEtTitles

echo "$leggoElement $leggoTitle" >> /tmp/xmluxv-elementsEtTitles

cp /tmp/xmluxv-css05Split/$d /tmp/xmluxv-gradusIV

cp /tmp/xmluxv-element /tmp/xmluxv-elementSubsection

        rm -f /tmp/xmluxv-css05Split/$d
	
	fi

done

################ FINE SUBSECTION 

################ INIZIO SUBSUBSECTION

mkdir /tmp/xmluxv-gradusV

for d in $(ls /tmp/xmluxv-css05Split)

do

	leggoD="$(cat /tmp/xmluxv-css05Split/$d)"

        grep "$leggoD" /tmp/xmluxv-css000 | awk '$1 > 0 {print $1}' | sed 's/<//g' > /tmp/xmluxv-element

	leggoElement="$(cat /tmp/xmluxv-element)"

	cat /tmp/xmluxv-css05Split/$d | sed 's/>/ /g' > /tmp/xmluxv-id0

	cat /tmp/xmluxv-id0 | awk '$1 > 0 {print $1}' | cut -d= -f2,2 | sed 's/"//g' > /tmp/xmluxv-id
	
	leggoID="$(cat /tmp/xmluxv-id)"

	grep "ID=\"$leggoID\"" $targetFile.lmx | sed 's/.*>//g' > /tmp/xmluxv-title

	leggoTitle="$(cat /tmp/xmluxv-title)"

	grep "ID=\"$leggoID\"" $targetFile.lmx | sed 's/.*name=//g' | sed 's/>.*//g' > /tmp/xmluxv-name

	leggoName=$(cat /tmp/xmluxv-name)

	sed 's/[^.]//g' /tmp/xmluxv-id | awk '{ print length }' > /tmp/xmluxv-dotFrequency

	leggoDotFrequency=$(cat /tmp/xmluxv-dotFrequency)

	if test $leggoDotFrequency -eq 4

	then

echo "$leggoID" >> /tmp/xmluxv-allIDs

echo "$leggoName" >> /tmp/xmluxv-allNames

echo "$leggoElement" >> /tmp/xmluxv-allElements

echo "$leggoTitle" >> /tmp/xmluxv-allTitles

echo "$leggoElement $leggoID" >> /tmp/xmluxv-elementsEtIDs

echo "$leggoID $leggoName" >> /tmp/xmluxv-IDsEtNames

echo "$leggoElement $leggoID $leggoName" >> /tmp/xmluxv-elementsEtIDsEtNames

echo "$leggoElement $leggoID $leggoName $leggoTitle" >> /tmp/xmluxv-elementsEtIDsEtNamesEtTitles

echo "$leggoID $leggoName $leggoTitle" >> /tmp/xmluxv-IDsEtNamesEtTitles

echo "$leggoElement $leggoID $leggoTitle" >> /tmp/xmluxv-elementsEtIDsEtTitles

echo "$leggoID $leggoTitle" >> /tmp/xmluxv-IDsEtTitles

echo "$leggoElement $leggoTitle" >> /tmp/xmluxv-elementsEtTitles

cp /tmp/xmluxv-element /tmp/xmluxv-elementSubsubsection

cp /tmp/xmluxv-css05Split/$d /tmp/xmluxv-gradusV

	rm -f /tmp/xmluxv-css05Split/$d

	fi

done

################ FINE SUBSUBSECTION 

################ INIZIO PARAPGRAPH

mkdir /tmp/xmluxv-gradusVI

for d in $(ls /tmp/xmluxv-css05Split)

do
	leggoD="$(cat /tmp/xmluxv-css05Split/$d)"

        grep "$leggoD" /tmp/xmluxv-css000 | awk '$1 > 0 {print $1}' | sed 's/<//g' > /tmp/xmluxv-element

	leggoElement="$(cat /tmp/xmluxv-element)"

	cat /tmp/xmluxv-css05Split/$d | sed 's/>/ /g' > /tmp/xmluxv-id0

	cat /tmp/xmluxv-id0 | awk '$1 > 0 {print $1}' | cut -d= -f2,2 | sed 's/"//g' > /tmp/xmluxv-id
	
	leggoID="$(cat /tmp/xmluxv-id)"

	grep "ID=\"$leggoID\"" $targetFile.lmx | sed 's/.*>//g' > /tmp/xmluxv-title

	leggoTitle="$(cat /tmp/xmluxv-title)"

	grep "ID=\"$leggoID\"" $targetFile.lmx | sed 's/.*name=//g' | sed 's/>.*//g' > /tmp/xmluxv-name

	leggoName=$(cat /tmp/xmluxv-name)

	sed 's/[^.]//g' /tmp/xmluxv-id | awk '{ print length }' > /tmp/xmluxv-dotFrequency

	leggoDotFrequency=$(cat /tmp/xmluxv-dotFrequency)

	if test $leggoDotFrequency -eq 5

	then

echo "$leggoID" >> /tmp/xmluxv-allIDs

echo "$leggoElement" >> /tmp/xmluxv-allElements

echo "$leggoName" >> /tmp/xmluxv-allNames

echo "$leggoTitle" >> /tmp/xmluxv-allTitles

echo "$leggoElement $leggoID" >> /tmp/xmluxv-elementsEtIDs

echo "$leggoID $leggoName" >> /tmp/xmluxv-IDsEtNames

echo "$leggoElement $leggoID $leggoName" >> /tmp/xmluxv-elementsEtIDsEtNames

echo "$leggoElement $leggoID $leggoName $leggoTitle" >> /tmp/xmluxv-elementsEtIDsEtNamesEtTitles

echo "$leggoID $leggoName $leggoTitle" >> /tmp/xmluxv-IDsEtNamesEtTitles

echo "$leggoElement $leggoID $leggoTitle" >> /tmp/xmluxv-elementsEtIDsEtTitles

echo "$leggoID $leggoTitle" >> /tmp/xmluxv-IDsEtTitles

echo "$leggoElement $leggoTitle" >> /tmp/xmluxv-elementsEtTitles

cp /tmp/xmluxv-element /tmp/xmluxv-elementParagraph

cp /tmp/xmluxv-css05Split/$d /tmp/xmluxv-gradusVI

	rm -f /tmp/xmluxv-css05Split/$d

	fi

done

################ FINE PARAGRAPH

################ INIZIO SUBPARAGRAPH
mkdir /tmp/xmluxv-gradusVII

for d in $(ls /tmp/xmluxv-css05Split)

do

	leggoD="$(cat /tmp/xmluxv-css05Split/$d)"

        grep "$leggoD" /tmp/xmluxv-css000 | awk '$1 > 0 {print $1}' | sed 's/<//g' > /tmp/xmluxv-element

	leggoElement="$(cat /tmp/xmluxv-element)"

	cat /tmp/xmluxv-css05Split/$d | sed 's/>/ /g' > /tmp/xmluxv-id0

	cat /tmp/xmluxv-id0 | awk '$1 > 0 {print $1}' | cut -d= -f2,2 | sed 's/"//g' > /tmp/xmluxv-id
	
	leggoID="$(cat /tmp/xmluxv-id)"

	grep "ID=\"$leggoID\"" $targetFile.lmx | sed 's/.*>//g' > /tmp/xmluxv-title

	leggoTitle="$(cat /tmp/xmluxv-title)"

	grep "ID=\"$leggoID\"" $targetFile.lmx | sed 's/.*name=//g' | sed 's/>.*//g' > /tmp/xmluxv-name

	leggoName=$(cat /tmp/xmluxv-name)

	sed 's/[^.]//g' /tmp/xmluxv-id | awk '{ print length }' > /tmp/xmluxv-dotFrequency

	leggoDotFrequency=$(cat /tmp/xmluxv-dotFrequency)

	if test $leggoDotFrequency -eq 6

	then

echo "$leggoID" >> /tmp/xmluxv-allIDs

echo "$leggoElement" >> /tmp/xmluxv-allElements

echo "$leggoName" >> /tmp/xmluxv-allNames

echo "$leggoTitle" >> /tmp/xmluxv-allTitles

echo "$leggoElement $leggoID" >> /tmp/xmluxv-elementsEtIDs

echo "$leggoID $leggoName" >> /tmp/xmluxv-IDsEtNames

echo "$leggoElement $leggoID $leggoName" >> /tmp/xmluxv-elementsEtIDsEtNames

echo "$leggoElement $leggoID $leggoName $leggoTitle" >> /tmp/xmluxv-elementsEtIDsEtNamesEtTitles

echo "$leggoID $leggoName $leggoTitle" >> /tmp/xmluxv-IDsEtNamesEtTitles

echo "$leggoElement $leggoID $leggoTitle" >> /tmp/xmluxv-elementsEtIDsEtTitles

echo "$leggoID $leggoTitle" >> /tmp/xmluxv-IDsEtTitles

echo "$leggoElement $leggoTitle" >> /tmp/xmluxv-elementsEtTitles

cp /tmp/xmluxv-element /tmp/xmluxv-elementSubparagraph

cp /tmp/xmluxv-css05Split/$d /tmp/xmluxv-gradusVII

	rm -f /tmp/xmluxv-css05Split/$d

	fi
done

################ FINE SUBPARAGRAPH 

rm -f $targetFile.lmxv

touch $targetFile.lmxv




##################################### non nella struttura familiare
## the ID tree

rm -fr $targetFile-lmxv_backup

cp -r $targetFile-lmxv $targetFile-lmxv_backup 2> /dev/null

rm -r $targetFile-lmxv

mkdir $targetFile-lmxv

mkdir $targetFile-lmxv/notKin

cd $targetFile-lmxv/notKin

## full: $targetFile-full.lmxv

echo " " >> $targetFile-notKin_full.lmxv

echo "NOT KIN" >> $targetFile-notKin_full.lmxv

echo " " >> $targetFile-notKin_full.lmxv

echo "<!-- (not kin) IDs tree" >> $targetFile-notKin_full.lmxv

echo "$(cat /tmp/xmluxv-allIDs)" >> $targetFile-notKin_full.lmxv

echo "end IDs tree (not kin) -->" >> $targetFile-notKin_full.lmxv

echo " " >> $targetFile-notKin_full.lmxv
 
echo "<!--(not kin) Elements tree" >> $targetFile-notKin_full.lmxv

echo "$(cat /tmp/xmluxv-allElements)" >> $targetFile-notKin_full.lmxv

echo "end elements tree (not kin) -->" >> $targetFile-notKin_full.lmxv

echo " " >> $targetFile-notKin_full.lmxv

echo "<!--(not kin) Names tree" >> $targetFile-notKin_full.lmxv

echo "$(cat /tmp/xmluxv-allNames)" >> $targetFile-notKin_full.lmxv

echo "end names tree (not kin) -->" >> $targetFile-notKin_full.lmxv

echo " " >> $targetFile-notKin_full.lmxv

echo "<!-- (not kin) Titles tree" >> $targetFile-notKin_full.lmxv

echo "$(cat /tmp/xmluxv-allTitles)" >> $targetFile-notKin_full.lmxv

echo "end titles tree (not kin) -->" >> $targetFile-notKin_full.lmxv

echo " " >> $targetFile-notKin_full.lmxv

echo "<!-- (not kin) IDs and elements tree" >> $targetFile-notKin_full.lmxv

echo "$(cat /tmp/xmluxv-elementsEtIDs)" >> $targetFile-notKin_full.lmxv

echo "end IDs and elements tree (not kin) -->" >> $targetFile-notKin_full.lmxv

echo " " >> $targetFile-notKin_full.lmxv

echo "<!-- (not kin) IDs and names tree" >> $targetFile-notKin_full.lmxv

echo "$(cat /tmp/xmluxv-IDsEtNames)" >> $targetFile-notKin_full.lmxv

echo "end IDs and names tree (not kin) -->" >> $targetFile-notKin_full.lmxv

echo " " >> $targetFile-notKin_full.lmxv

echo "<!-- (not kin) Elements, IDs and names tree" >> $targetFile-notKin_full.lmxv

echo "$(cat /tmp/xmluxv-elementsEtIDsEtNames)" >> $targetFile-notKin_full.lmxv

echo "end Elements, IDs and names (not kin) -->" >> $targetFile-notKin_full.lmxv

echo " " >> $targetFile-notKin_full.lmxv

echo "<!-- (not kin) Elements, IDs, names and titles tree" >> $targetFile-notKin_full.lmxv

echo "$(cat /tmp/xmluxv-elementsEtIDsEtNamesEtTitles)" >> $targetFile-notKin_full.lmxv

echo "end Elements, IDs, names and titles tree (not kin) -->" >> $targetFile-notKin_full.lmxv

echo " " >> $targetFile-notKin_full.lmxv

echo "<!-- (not kin) IDs, names and titles tree" >> $targetFile-notKin_full.lmxv

echo "$(cat /tmp/xmluxv-IDsEtNamesEtTitles)" >> $targetFile-notKin_full.lmxv

echo "end IDs, names and titles tree (not kin) -->" >> $targetFile-notKin_full.lmxv

echo " " >> $targetFile-notKin_full.lmxv

echo "<!-- (not kin) IDs and titles tree" >> $targetFile-notKin_full.lmxv

echo "$(cat /tmp/xmluxv-IDsEtTitles)" >> $targetFile-notKin_full.lmxv

echo "end IDs and titles tree (not kin) -->" >> $targetFile-notKin_full.lmxv

echo " " >> $targetFile-notKin_full.lmxv

echo "<!-- (not kin) Elements and titles tree" >> $targetFile-notKin_full.lmxv

echo "$(cat /tmp/xmluxv-elementsEtTitles)" >> $targetFile-notKin_full.lmxv

echo "end elements and titles tree (not kin) -->" >> $targetFile-notKin_full.lmxv

echo " " >> $targetFile-notKin_full.lmxv

echo "<!-- (not kin) Elements, IDs and titles tree" >> $targetFile-notKin_full.lmxv

echo "$(cat /tmp/xmluxv-elementsEtIDsEtTitles)" >> $targetFile-notKin_full.lmxv

echo "end elements, IDs and titles tree (not kin) -->" >> $targetFile-notKin_full.lmxv

echo " " >> $targetFile-notKin_full.lmxv

cp $targetFile-notKin_full.lmxv $posnow/$targetFile.lmxv


## parziali: $targetFile.lmxv

echo "<!-- (not kin) IDs tree" >> $targetFile-notKin_ids.lmxv

echo "$(cat /tmp/xmluxv-allIDs)" >> $targetFile-notKin_ids.lmxv

echo "end IDs tree (not kin) -->" >> $targetFile-notKin_ids.lmxv

echo "<!--(not kin) Elements tree" >> $targetFile-notKin_elements.lmxv

echo "$(cat /tmp/xmluxv-allElements)" >> $targetFile-notKin_elements.lmxv

echo "end elements tree (not kin) -->" >> $targetFile-notKin_elements.lmxv

echo "<!--(not kin) Names tree" >> $targetFile-notKin_names.lmxv

echo "$(cat /tmp/xmluxv-allNames)" >> $targetFile-notKin_names.lmxv

echo "end names tree (not kin) -->" >> $targetFile-notKin_names.lmxv

echo "<!-- (not kin) Titles tree" >> $targetFile-notKin_titles.lmxv

echo "$(cat /tmp/xmluxv-allTitles)" >> $targetFile-notKin_titles.lmxv

echo "end titles tree (not kin) -->" >> $targetFile-notKin_titles.lmxv


echo "<!-- (not kin) Elements and IDs tree" >> $targetFile-notKin_elements-ids.lmxv

echo "$(cat /tmp/xmluxv-elementsEtIDs)" >> $targetFile-notKin_elements-ids.lmxv

echo "end elements and IDs tree (not kin) -->" >> $targetFile-notKin_elements-ids.lmxv


echo "<!-- (not kin) IDs and names tree" >> $targetFile-notKin_ids-names.lmxv

echo "$(cat /tmp/xmluxv-IDsEtNames)" >> $targetFile-notKin_ids-names.lmxv

echo "end IDs and names tree (not kin) -->" >> $targetFile-notKin_ids-names.lmxv


echo "<!-- (not kin) Elements, IDs and names tree" >> $targetFile-notKin_elements-ids-names.lmxv

echo "$(cat /tmp/xmluxv-elementsEtIDsEtNames)" >> $targetFile-notKin_elements-ids-names.lmxv

echo "end Elements, IDs and names (not kin) -->" >> $targetFile-notKin_elements-ids-names.lmxv


echo "<!-- (not kin) Elements, IDs, names and titles tree" >> $targetFile-notKin_elements-ids-names-titles.lmxv

echo "$(cat /tmp/xmluxv-elementsEtIDsEtNamesEtTitles)" >> $targetFile-notKin_elements-ids-names-titles.lmxv

echo "end Elements, IDs, names and titles tree (not kin) -->" >> $targetFile-notKin_elements-ids-names-titles.lmxv

echo "<!-- (not kin) IDs, names and titles tree" >> $targetFile-notKin_ids-names-titles.lmxv

echo "$(cat /tmp/xmluxv-IDsEtNamesEtTitles)" >> $targetFile-notKin_ids-names-titles.lmxv

echo "end IDs, names and titles tree (not kin) -->" >> $targetFile-notKin_ids-names-titles.lmxv

echo "<!-- (not kin) IDs and titles tree" >> $targetFile-notKin_ids-titles.lmxv

echo "$(cat /tmp/xmluxv-IDsEtTitles)" >> $targetFile-notKin_ids-titles.lmxv

echo "end IDs and titles tree (not kin) -->" >> $targetFile-notKin_ids-titles.lmxv


echo "<!-- (not kin) Elements and titles tree" >> $targetFile-notKin_elements-titles.lmxv

echo "$(cat /tmp/xmluxv-elementsEtTitles)" >> $targetFile-notKin_elements-titles.lmxv

echo "end elements and titles tree (not kin) -->" >> $targetFile-notKin_elements-titles.lmxv

echo "<!-- (not kin) Elements, IDs and titles tree" >> $targetFile-notKin_elements-ids-titles.lmxv

echo "$(cat /tmp/xmluxv-elementsEtIDsEtTitles)" >> $targetFile-notKin_elements-ids-titles.lmxv

echo "end elements, IDs and titles tree (not kin) -->" >> $targetFile-notKin_elements-ids-titles.lmxv

cd $posnow



##################################### secondo la struttura familiare (KIN)

cat /tmp/xmluxv-allIDs | sort > /tmp/xmluxv-allIDsRec

mkdir /tmp/xmluxv-allIDsRecSplit

split -l1 /tmp/xmluxv-allIDsRec /tmp/xmluxv-allIDsRecSplit/

for a in $(ls /tmp/xmluxv-allIDsRecSplit/)

do

leggoIDRec="$(cat /tmp/xmluxv-allIDsRecSplit/$a)"

echo $leggoIDRec > /tmp/xmluxv-allIDRec

## lascia lo spazio dopo ^$leggoIDRec, è voluto.
grep "^$leggoIDRec " /tmp/xmluxv-IDsEtTitles | awk '{for(i=2;i<=NF;i++) print " " $i}' | tr -d '\n' | sed 's/^.//g' > /tmp/xmluxv-titleRecB00

leggoTitle00="$(cat /tmp/xmluxv-titleRecB00)"

## Mi serve echo perché mi dà un "carriage return"
echo "$leggoTitle00" > /tmp/xmluxv-titleRecB

cat /tmp/xmluxv-titleRecB >> /tmp/xmluxv-allTitlesRec

leggoTitleRecB="$(cat /tmp/xmluxv-titleRecB)"

## lascia lo spazio dopo ^$leggoIDRec, è voluto.
grep "^$leggoIDRec " /tmp/xmluxv-IDsEtNames | awk '{for(i=2;i<=NF;i++) print " " $i}' | tr -d '\n' | sed 's/^.//g' > /tmp/xmluxv-nameRecB00

leggoName00="$(cat /tmp/xmluxv-nameRecB00)"

## Mi serve echo perché mi dà un "carriage return"
echo "$leggoName00" > /tmp/xmluxv-nameRecB

cat /tmp/xmluxv-nameRecB >> /tmp/xmluxv-allNamesRec

leggoNameRecB="$(cat /tmp/xmluxv-nameRecB)"

## lascia lo spazio prima e dopo ^$leggoIDRec, è voluto.
grep " $leggoIDRec " /tmp/xmluxv-elementsEtIDsEtTitles | awk '$1 > 0 {print $1}' > /tmp/xmluxv-elementsRecB

cat /tmp/xmluxv-elementsRecB >> /tmp/xmluxv-allElementsRec

leggoAllElementsRecB="$(cat /tmp/xmluxv-elementsRecB)"


echo "$leggoIDRec $leggoNameRecB" >> /tmp/xmluxv-IDsEtNamesRec

echo "$leggoIDRec $leggoNameRecB $leggoTitleRecB" >> /tmp/xmluxv-IDsEtNamesEtTitlesRec

echo "$leggoIDRec $leggoAllElementsRecB $leggoNameRecB" >> /tmp/xmluxv-IDsEtElementsEtNamesRec

echo "$leggoIDRec $leggoAllElementsRecB $leggoNameRecB $leggoTitleRecB" >> /tmp/xmluxv-IDsEtElementsEtNamesEtTitlesRec

echo "$leggoIDRec $leggoAllElementsRecB $leggoTitleRecB" >> /tmp/xmluxv-IDsEtElementsEtTitlesRec

echo "$leggoIDRec $leggoTitleRecB" >> /tmp/xmluxv-IDsEtTitlesRec

echo "$leggoAllElementsRecB  $leggoTitleRecB" >> /tmp/xmluxv-elementsEtTitlesRec

echo "$leggoIDRec $leggoAllElementsRecB" >> /tmp/xmluxv-IDsEtElementsRec

done

### KIN full
mkdir $targetFile-lmxv/kin

cd $targetFile-lmxv/kin


echo "KIN" >> $targetFile-full.lmxv

echo " " >> $targetFile-full.lmxv

echo "<!-- IDs tree" >> $targetFile-full.lmxv

echo "$(cat /tmp/xmluxv-allIDsRec)" >> $targetFile-full.lmxv

echo "end IDs tree -->" >> $targetFile-full.lmxv

echo " " >> $targetFile-full.lmxv

echo "<!-- Names tree" >> $targetFile-full.lmxv

echo "$(cat /tmp/xmluxv-allNamesRec)" >> $targetFile-full.lmxv

echo "end names tree -->" >> $targetFile-full.lmxv

echo " " >> $targetFile-full.lmxv
 
echo "<!-- Elements tree" >> $targetFile-full.lmxv

echo "$(cat /tmp/xmluxv-allElementsRec)" >> $targetFile-full.lmxv

echo "end elements tree -->" >> $targetFile-full.lmxv

echo " " >> $targetFile-full.lmxv

echo "<!-- Titles tree" >> $targetFile-full.lmxv

echo "$(cat /tmp/xmluxv-allTitlesRec)" >> $targetFile-full.lmxv

echo "end titles tree -->" >> $targetFile-full.lmxv

echo " " >> $targetFile-full.lmxv

echo "<!-- IDs and names tree" >> $targetFile-full.lmxv

echo "$(cat /tmp/xmluxv-IDsEtNamesRec)" >> $targetFile-full.lmxv

echo "end IDs and names tree -->" >> $targetFile-full.lmxv

echo " " >> $targetFile-full.lmxv

echo "<!-- IDs, elements and names tree" >> $targetFile-full.lmxv

echo "$(cat /tmp/xmluxv-IDsEtElementsEtNamesRec)" >> $targetFile-full.lmxv

echo "end IDs, elements and names -->" >> $targetFile-full.lmxv

echo " " >> $targetFile-full.lmxv

echo "<!-- IDs, elements, names and titles tree" >> $targetFile-full.lmxv

echo "$(cat /tmp/xmluxv-IDsEtElementsEtNamesEtTitlesRec)" >> $targetFile-full.lmxv

echo "end IDs, elements, names and titles tree -->" >> $targetFile-full.lmxv

echo " " >> $targetFile-full.lmxv

echo "<!-- IDs, names and titles tree" >> $targetFile-full.lmxv

echo "$(cat /tmp/xmluxv-IDsEtNamesEtTitlesRec)" >> $targetFile-full.lmxv

echo "end IDs, names and titles tree -->" >> $targetFile-full.lmxv

echo " " >> $targetFile-full.lmxv

echo "<!-- IDs and elements tree" >> $targetFile-full.lmxv

echo "$(cat /tmp/xmluxv-IDsEtElementsRec)" >> $targetFile-full.lmxv

echo "end IDs and elements tree -->" >> $targetFile-full.lmxv

echo " " >> $targetFile-full.lmxv

echo "<!-- IDs and titles tree" >> $targetFile-full.lmxv

echo "$(cat /tmp/xmluxv-IDsEtTitlesRec)" >> $targetFile-full.lmxv

echo "end IDs and titles tree -->" >> $targetFile-full.lmxv

echo " " >> $targetFile-full.lmxv

echo "<!-- Elements and titles tree" >> $targetFile-full.lmxv

echo "$(cat /tmp/xmluxv-elementsEtTitlesRec)" >> $targetFile-full.lmxv

echo "end elements and titles tree -->" >> $targetFile-full.lmxv

echo " " >> $targetFile-full.lmxv

echo "<!-- IDs, elements and titles tree" >> $targetFile-full.lmxv

echo "$(cat /tmp/xmluxv-IDsEtElementsEtTitlesRec)" >> $targetFile-full.lmxv

echo "end IDs, elements and titles tree -->" >> $targetFile-full.lmxv

echo " " >> $targetFile-full.lmxv

echo " " >> $posnow/$targetFile.lmxv
echo " " >> $posnow/$targetFile.lmxv
echo " " >> $posnow/$targetFile.lmxv
echo " " >> $posnow/$targetFile.lmxv

cat $targetFile-full.lmxv >> $posnow/$targetFile.lmxv


## KIN singoli

echo "<!-- IDs tree" >> $targetFile-ids.lmxv

echo "$(cat /tmp/xmluxv-allIDsRec)" >> $targetFile-ids.lmxv

echo "end IDs tree -->" >> $targetFile-ids.lmxv


echo "<!-- Names tree" >> $targetFile-names.lmxv

echo "$(cat /tmp/xmluxv-allNamesRec)" >> $targetFile-names.lmxv

echo "end names tree -->" >> $targetFile-names.lmxv

 
echo "<!-- Elements tree" >> $targetFile-elements.lmxv

echo "$(cat /tmp/xmluxv-allElementsRec)" >> $targetFile-elements.lmxv

echo "end elements tree -->" >> $targetFile-elements.lmxv


echo "<!-- Titles tree" >> $targetFile-titles.lmxv

echo "$(cat /tmp/xmluxv-allTitlesRec)" >> $targetFile-titles.lmxv

echo "end titles tree -->" >> $targetFile-titles.lmxv


echo "<!-- IDs and names tree" >> $targetFile-ids-names.lmxv

echo "$(cat /tmp/xmluxv-IDsEtNamesRec)" >> $targetFile-ids-names.lmxv

echo "end IDs and names tree -->" >> $targetFile-ids-names.lmxv


echo "<!-- IDs, elements and names tree" >> $targetFile-ids-elements-names.lmxv

echo "$(cat /tmp/xmluxv-IDsEtElementsEtNamesRec)" >> $targetFile-ids-elements-names.lmxv

echo "end IDs, elements and names -->" >> $targetFile-ids-elements-names.lmxv


echo "<!-- IDs, elements, names and titles tree" >> $targetFile-ids-elements-names-titles.lmxv

echo "$(cat /tmp/xmluxv-IDsEtElementsEtNamesEtTitlesRec)" >> $targetFile-ids-elements-names-titles.lmxv

echo "end IDs, elements, names and titles tree -->" >> $targetFile-ids-elements-names-titles.lmxv


echo "<!-- IDs, names and titles tree" >> $targetFile-ids-names-titles.lmxv

echo "$(cat /tmp/xmluxv-IDsEtNamesEtTitlesRec)" >> $targetFile-ids-names-titles.lmxv

echo "end IDs, names and titles tree -->" >> $targetFile-ids-names-titles.lmxv


echo "<!-- IDs and elements tree" >> $targetFile-ids-elements.lmxv

echo "$(cat /tmp/xmluxv-IDsEtElementsRec)" >> $targetFile-ids-elements.lmxv

echo "end IDs and elements tree -->" >> $targetFile-ids-elements.lmxv


echo "<!-- IDs and titles tree" >> $targetFile-ids-titles.lmxv

echo "$(cat /tmp/xmluxv-IDsEtTitlesRec)" >> $targetFile-ids-titles.lmxv

echo "end IDs and titles tree -->" >> $targetFile-ids-titles.lmxv


echo "<!-- Elements and titles tree" >> $targetFile-elements-titles.lmxv

echo "$(cat /tmp/xmluxv-elementsEtTitlesRec)" >> $targetFile-elements-titles.lmxv

echo "end elements and titles tree -->" >> $targetFile-elements-titles.lmxv


echo "<!-- IDs, elements and titles tree" >> $targetFile-ids-elements-titles.lmxv

echo "$(cat /tmp/xmluxv-IDsEtElementsEtTitlesRec)" >> $targetFile-ids-elements-titles.lmxv

echo "end IDs, elements and titles tree -->" >> $targetFile-ids-elements-titles.lmxv


cd $posnow

############################# opzioni

grep "^-id" /tmp/xmluxvPseudoOptions/* > /tmp/xmluxv-optionCheck

stat --format %s /tmp/xmluxv-optionCheck > /tmp/xmluxv-optionCheckBytes

leggoBytesOptionCheck=$(cat /tmp/xmluxv-optionCheckBytes)

if test $leggoBytesOptionCheck -gt 0

then
	grep -n "<!-- IDs tree"  $targetFile.lmxv | cut -d: -f1,1 > /tmp/xmluxv-nLineBegin

	begin=$(cat /tmp/xmluxv-nLineBegin)

	grep -n "end IDs tree -->"  $targetFile.lmxv | cut -d: -f1,1 > /tmp/xmluxv-nLineEnd

	end=$(cat /tmp/xmluxv-nLineEnd)

	blocco=$(($end - $begin))

grep -A $blocco "<!-- IDs tree" $targetFile.lmxv > /tmp/xmluxv-blockToView

cp /tmp/xmluxv-blockToView /tmp/xmluxev-blockToView

grep "^-s" /tmp/xmluxvPseudoOptions/* > /tmp/xmluxv-optionCheckS

stat --format %s /tmp/xmluxv-optionCheckS > /tmp/xmluxv-optionCheckSBytes

leggoBytesOptionCheckS=$(cat /tmp/xmluxv-optionCheckSBytes)

if test ! $leggoBytesOptionCheckS -gt 0

then

gview -f -geometry 70x70 /tmp/xmluxv-blockToView

fi

fi



grep "^-el" /tmp/xmluxvPseudoOptions/* > /tmp/xmluxv-optionCheck

stat --format %s /tmp/xmluxv-optionCheck > /tmp/xmluxv-optionCheckBytes

leggoBytesOptionCheck=$(cat /tmp/xmluxv-optionCheckBytes)

if test $leggoBytesOptionCheck -gt 0

then
	grep -n "<!-- Elements tree"  $targetFile.lmxv | cut -d: -f1,1 > /tmp/xmluxv-nLineBegin

	begin=$(cat /tmp/xmluxv-nLineBegin)

	grep -n "end elements tree -->"  $targetFile.lmxv | cut -d: -f1,1 > /tmp/xmluxv-nLineEnd

	end=$(cat /tmp/xmluxv-nLineEnd)

	blocco=$(($end - $begin))

grep -A $blocco "<!-- Elements tree" $targetFile.lmxv > /tmp/xmluxv-blockToView

cp /tmp/xmluxv-blockToView /tmp/xmluxev-blockToView

grep "^-s" /tmp/xmluxvPseudoOptions/* > /tmp/xmluxv-optionCheckS

stat --format %s /tmp/xmluxv-optionCheckS > /tmp/xmluxv-optionCheckSBytes

leggoBytesOptionCheckS=$(cat /tmp/xmluxv-optionCheckSBytes)

if test ! $leggoBytesOptionCheckS -gt 0

then

gview -f -geometry 70x70 /tmp/xmluxv-blockToView

fi

fi


grep "^-ti" /tmp/xmluxvPseudoOptions/* > /tmp/xmluxv-optionCheck

stat --format %s /tmp/xmluxv-optionCheck > /tmp/xmluxv-optionCheckBytes

leggoBytesOptionCheck=$(cat /tmp/xmluxv-optionCheckBytes)

if test $leggoBytesOptionCheck -gt 0

then
	grep -n "<!-- Titles tree"  $targetFile.lmxv | cut -d: -f1,1 > /tmp/xmluxv-nLineBegin

	begin=$(cat /tmp/xmluxv-nLineBegin)

	grep -n "end titles tree -->"  $targetFile.lmxv | cut -d: -f1,1 > /tmp/xmluxv-nLineEnd

	end=$(cat /tmp/xmluxv-nLineEnd)

	blocco=$(($end - $begin))

grep -A $blocco "<!-- Titles tree" $targetFile.lmxv > /tmp/xmluxv-blockToView

cp /tmp/xmluxv-blockToView /tmp/xmluxev-blockToView

grep "^-s" /tmp/xmluxvPseudoOptions/* > /tmp/xmluxv-optionCheckS

stat --format %s /tmp/xmluxv-optionCheckS > /tmp/xmluxv-optionCheckSBytes

leggoBytesOptionCheckS=$(cat /tmp/xmluxv-optionCheckSBytes)

if test ! $leggoBytesOptionCheckS -gt 0

then

gview -f -geometry 70x70 /tmp/xmluxv-blockToView

fi

fi

grep "^-ei" /tmp/xmluxvPseudoOptions/* > /tmp/xmluxv-optionCheck

stat --format %s /tmp/xmluxv-optionCheck > /tmp/xmluxv-optionCheckBytes

leggoBytesOptionCheck=$(cat /tmp/xmluxv-optionCheckBytes)

if test $leggoBytesOptionCheck -gt 0

then
	grep -n "<!-- IDs and elements tree"  $targetFile.lmxv | cut -d: -f1,1 > /tmp/xmluxv-nLineBegin

	begin=$(cat /tmp/xmluxv-nLineBegin)

	grep -n "end IDs and elements tree -->"  $targetFile.lmxv | cut -d: -f1,1 > /tmp/xmluxv-nLineEnd

	end=$(cat /tmp/xmluxv-nLineEnd)

	blocco=$(($end - $begin))

grep -A $blocco "<!-- IDs and elements tree" $targetFile.lmxv > /tmp/xmluxv-blockToView

cp /tmp/xmluxv-blockToView /tmp/xmluxev-blockToView

grep "^-s" /tmp/xmluxvPseudoOptions/* > /tmp/xmluxv-optionCheckS

stat --format %s /tmp/xmluxv-optionCheckS > /tmp/xmluxv-optionCheckSBytes

leggoBytesOptionCheckS=$(cat /tmp/xmluxv-optionCheckSBytes)

if test ! $leggoBytesOptionCheckS -gt 0

then

gview -f -geometry 70x70 /tmp/xmluxv-blockToView

fi

fi

grep "^-it" /tmp/xmluxvPseudoOptions/* > /tmp/xmluxv-optionCheck

stat --format %s /tmp/xmluxv-optionCheck > /tmp/xmluxv-optionCheckBytes

leggoBytesOptionCheck=$(cat /tmp/xmluxv-optionCheckBytes)

if test $leggoBytesOptionCheck -gt 0

then
	grep -n "<!-- IDs and titles tree"  $targetFile.lmxv | cut -d: -f1,1 > /tmp/xmluxv-nLineBegin

	begin=$(cat /tmp/xmluxv-nLineBegin)

	grep -n "end IDs and titles tree -->"  $targetFile.lmxv | cut -d: -f1,1 > /tmp/xmluxv-nLineEnd

	end=$(cat /tmp/xmluxv-nLineEnd)

	blocco=$(($end - $begin))

grep -A $blocco "<!-- IDs and titles tree" $targetFile.lmxv > /tmp/xmluxv-blockToView

cp /tmp/xmluxv-blockToView /tmp/xmluxev-blockToView

grep "^-s" /tmp/xmluxvPseudoOptions/* > /tmp/xmluxv-optionCheckS

stat --format %s /tmp/xmluxv-optionCheckS > /tmp/xmluxv-optionCheckSBytes

leggoBytesOptionCheckS=$(cat /tmp/xmluxv-optionCheckSBytes)

if test ! $leggoBytesOptionCheckS -gt 0

then

gview -f -geometry 70x70 /tmp/xmluxv-blockToView

fi

fi


grep "^-et" /tmp/xmluxvPseudoOptions/* > /tmp/xmluxv-optionCheck

stat --format %s /tmp/xmluxv-optionCheck > /tmp/xmluxv-optionCheckBytes

leggoBytesOptionCheck=$(cat /tmp/xmluxv-optionCheckBytes)

if test $leggoBytesOptionCheck -gt 0

then
	grep -n "<!-- Elements and titles tree"  $targetFile.lmxv | cut -d: -f1,1 > /tmp/xmluxv-nLineBegin

	begin=$(cat /tmp/xmluxv-nLineBegin)

	grep -n "end elements and titles tree -->"  $targetFile.lmxv | cut -d: -f1,1 > /tmp/xmluxv-nLineEnd

	end=$(cat /tmp/xmluxv-nLineEnd)

	blocco=$(($end - $begin))

grep -A $blocco "<!-- Elements and titles tree" $targetFile.lmxv > /tmp/xmluxv-blockToView

cp /tmp/xmluxv-blockToView /tmp/xmluxev-blockToView

grep "^-s" /tmp/xmluxvPseudoOptions/* > /tmp/xmluxv-optionCheckS

stat --format %s /tmp/xmluxv-optionCheckS > /tmp/xmluxv-optionCheckSBytes

leggoBytesOptionCheckS=$(cat /tmp/xmluxv-optionCheckSBytes)

if test ! $leggoBytesOptionCheckS -gt 0

then

gview -f -geometry 70x70 /tmp/xmluxv-blockToView

fi

fi

grep "^-all" /tmp/xmluxvPseudoOptions/* > /tmp/xmluxv-optionCheck

stat --format %s /tmp/xmluxv-optionCheck > /tmp/xmluxv-optionCheckBytes

leggoBytesOptionCheck=$(cat /tmp/xmluxv-optionCheckBytes)

if test $leggoBytesOptionCheck -gt 0

then
	grep -n "<!-- IDs, elements, names and titles tree"  $targetFile.lmxv | cut -d: -f1,1 > /tmp/xmluxv-nLineBegin

	begin=$(cat /tmp/xmluxv-nLineBegin)

	grep -n "end IDs, elements, names and titles tree -->"  $targetFile.lmxv | cut -d: -f1,1 > /tmp/xmluxv-nLineEnd

	end=$(cat /tmp/xmluxv-nLineEnd)

	blocco=$(($end - $begin))

grep -A $blocco "<!-- IDs, elements, names and titles tree" $targetFile.lmxv > /tmp/xmluxv-blockToView

## /tmp/xmluxev-blockToView serve agli script esterni
cp /tmp/xmluxv-blockToView /tmp/xmluxev-blockToView

grep "^-s" /tmp/xmluxvPseudoOptions/* > /tmp/xmluxv-optionCheckS

stat --format %s /tmp/xmluxv-optionCheckS > /tmp/xmluxv-optionCheckSBytes

leggoBytesOptionCheckS=$(cat /tmp/xmluxv-optionCheckSBytes)

if test ! $leggoBytesOptionCheckS -gt 0

then

gview -f -geometry 70x70 /tmp/xmluxv-blockToView

fi

fi

rm -rf /tmp/xmluxv*

exit

